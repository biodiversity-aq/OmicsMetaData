#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
dataQC.DwC_general(dataset=test_occur, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE)
dataQC.DwC_general(dataset=test_occur, DwC.type = "occurrence", ask.input = FALSE,
complete.data=FALSE)
test_occur1 <- data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa sp."),
row.names=c("sp1", "sp2"))
test_occur2 <- data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", "2021-09-28"),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c("humanObservation", "humanObservation"),
occurrenceStatus=c("present", "absent"),
row.names=c("sp1", "sp2"))
dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE)
dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=F)
dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE)
test_that("dataQC.DwC_general works for occurrence data", {
expect_equal(dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE),
data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=c(NA, NA),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c(1848, 1753)
row.names=c("sp1", "sp2")))
})
test_that("dataQC.DwC_general works for occurrence data", {
expect_equal(dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE),
data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=c(NA, NA),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c(1848, 1753),
row.names=c("sp1", "sp2")))
})
test_that("dataQC.DwC_general works for occurrence data", {
expect_equal(dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE),
data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=as.character(c(NA, NA)),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c("1848", "1753"),
row.names=c("sp1", "sp2")))
})
dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=FALSE)
test_that("dataQC.DwC_general works for occurrence data", {
expect_equal(dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=TRUE),
data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=as.character(c(NA, NA)),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c("1848", "1753"),
row.names=c("sp1", "sp2")))
expect_equal(dataQC.DwC_general(dataset=test_occur1, DwC.type = "occurrence", ask.input = FALSE,
complete.data=FALSE),
data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa sp."),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
row.names=c("sp1", "sp2")))
})
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE)
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
measurementValueID=c(4, NA),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE)
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1)
})
dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE)
test_emof1
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1)
})
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA)
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE),
data.frame(eventID=c("sp1", "sp2"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
eventDate=c("2021-09-27", NA),
row.names=c("sp1", "sp2")))
})
dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE)
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
eventDate=c("2021-09-27", "2021-09-06")
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
eventDate=c("2021-09-27", "2021-09-06")
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1
})
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1)
})
test_emof1
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
eventDate=c("2021-09-27", "2021-09-06")
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_emof1 <- data.frame(eventID=c("sp1", "sp2"),
eventDate=c("2021-09-27", "2021-09-06"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sp1", "sp2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1)
})
test_emof1 <- data.frame(eventID=c("sample1", "sample2"),
eventDate=c("2021-09-27", "2021-09-06"),
measurementValueID=c(4, 5),
measurementUnitID=c("m", "m"),
measurementTypeID=c("MIxS:depth", "MIxS:depth"),
row.names=c("sample1", "sample2"))
test_that("dataQC.DwC_general works for emof data", {
expect_equal(dataQC.DwC_general(dataset=test_emof1, DwC.type = "emof", ask.input = FALSE,
complete.data=FALSE), test_emof1)
})
dataQC.DwC(Event=test_event, eMoF=test_emof1)
?dataQC.DwC
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE)
occurrenceQC
?occurrenceQC
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
# assuming all package files are in pck_dir:
pck_dir <- "/Users/msweetlove/R_packages/OmicsMetaData"
setwd(pck_dir)
# all data must be in rawData_dir:
rawData_dir <- "/Users/msweetlove/R_packages/raw_packageData"
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE)
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event")
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="occurrence")
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
# assuming all package files are in pck_dir:
pck_dir <- "/Users/msweetlove/R_packages/OmicsMetaData"
setwd(pck_dir)
# all data must be in rawData_dir:
rawData_dir <- "/Users/msweetlove/R_packages/raw_packageData"
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event")
test <- dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event")
warningmessages
t <- c()
length(t)
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
test <- dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event")
test
View(test)
t<-as.character(NA)
is.na(t)
is.na(t) && t !=""
is.na(t) & t !=""
t
EML.url<-""
length(EML.url)
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
pck_dir <- "/Users/msweetlove/R_packages/OmicsMetaData"
setwd(pck_dir)
# all data must be in rawData_dir:
rawData_dir <- "/Users/msweetlove/R_packages/raw_packageData"
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
test <- dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event")
test
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
#----------------------------------------
# building the package
#----------------------------------------
#devtools::install(pck_dir, dependencies=TRUE) #install with updating all dependancies
devtools::install(pck_dir, dependencies=FALSE)
#----------------------------------------
# check if it works
#----------------------------------------
library(OmicsMetaData)
test
test_that("dataQC.DwC_general works for event data", {
expect_s4_class(dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, EML.url=NA,
out.type="event"), "DwC.event")
})
dataQC.DwC(Event=test_event, ask.input = FALSE, EML.url=NA,
out.type="event")
dataQC.DwC(Event=test_event, ask.input = FALSE,
out.type="event")
t<-dataQC.DwC(Event=test_event, ask.input = FALSE, out.type="event")
t@core
test_event
t@occurrence
t@emof
test_that("dataQC.DwC works for event data", {
expect_s4_class(dataQC.DwC(Event=test_event, ask.input = FALSE, out.type="event"),
"DwC.event")
expect_equal(dataQC.DwC(Event=test_event, ask.input = FALSE, out.type="event"),
new("DwC.event",
core = test_event,
occurrence = data.frame(),
emof = data.frame(),
EML.url=as.character(NA),
QC=TRUE))
})
dataQC.DwC(Occurrence = =test_occur1, ask.input = FALSE, out.type="event")
dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event")
test_that("dataQC.DwC works for occurrence data", {
expect_s4_class(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event"),
"DwC.event")
expect_error(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event"))
})
dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence")
t<-dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence")
t@core
test_that("dataQC.DwC works for occurrence data", {
expect_s4_class(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence"),
"DwC.occurrence")
expect_error(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event"))
})
t@emof
test_that("dataQC.DwC works for occurrence data", {
expect_s4_class(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence"),
"DwC.occurrence")
expect_error(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event"))
expect_equal(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence"),
new("DwC.occurrence",
core = data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=as.character(c(NA, NA)),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c("1848", "1753"),
row.names=c("sp1", "sp2")),
emof = data.frame(),
EML.url=as.character(NA),
QC=TRUE)))
})
test_that("dataQC.DwC works for occurrence data", {
expect_s4_class(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence"),
"DwC.occurrence")
expect_error(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="event"))
expect_equal(dataQC.DwC(Occurrence=test_occur1, ask.input = FALSE, out.type="occurrence"),
new("DwC.occurrence",
core = data.frame(occurrenceID=c("sp1", "sp2"),
eventDate=c("2021-09-27", NA),
decimalLatitude=c("54.7", "33"),
decimalLongitude=c("88.9", "-48.4"),
genus=c("Aulacoseira", "Rosa"),
basisOfRecord=c(NA, NA),
occurrenceStatus=c(NA, NA),
scientificName=c("Aulacoseira", "Rosa"),
scientificNameID=c("urn:lsid:marinespecies.org:taxname:148959", "urn:lsid:marinespecies.org:taxname:425714"),
kingdom=c("Chromista", "Plantae"),
phylum=c("Ochrophyta", "Tracheophyta"),
class=c("Bacillariophyceae", "Magnoliopsida"),
order=c("Aulacoseirales", "Rosales"),
family=c("Aulacoseiraceae", "Rosaceae"),
specificEpithet=as.character(c(NA, NA)),
scientificNameAuthorship=c("G.H.K. Thwaites", "Linnaeus"),
namePublishedInYear=c("1848", "1753"),
row.names=c("sp1", "sp2")),
emof = data.frame(),
EML.url=as.character(NA),
QC=TRUE))
})
test_that("dataQC.DwC works for event data with eMoF", {
expect_equal(dataQC.DwC(Event=test_event, eMoF=test_emof1, ask.input = FALSE, out.type="event"),
new("DwC.event",
core = test_event,
occurrence = data.frame(),
emof = test_emof1,
EML.url=as.character(NA),
QC=TRUE))
})
install.packages("codemetar")
library(remotes)
remotes::install_github("ropensci/codemetar", ref = "dev")
remotes::install_github("ropensci/codemetar")
pck_dir <- "/Users/msweetlove/R_packages/OmicsMetaData"
setwd(pck_dir)
# all data must be in rawData_dir:
rawData_dir <- "/Users/msweetlove/R_packages/raw_packageData"
detach("package:OmicsMetaData", unload=TRUE)
remove.packages("OmicsMetaData")
#----------------------------------------
# documenting package
#----------------------------------------
## documentation
devtools::document(pkg=pck_dir)  #write NAMESPACE
roxygenize(pck_dir, roclets=c('rd')) #build documentation from structured code comments
library(codemetar)
codemetar::write_codemeta()
